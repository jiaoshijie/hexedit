\# no table of contents:
.HX 0
.TH HEXEDIT 1 "12 July 1998"
.SH NAME
hexedit \- view and edit files in hexadecimal or in ASCII
.SH SYNOPSIS
.I hexedit
[\-s | \-\-sector] [\-m | \-\-maximize] [\-l<n> | \-\-linelength <n>] [\-h | \-\-help] [filename]
.SH DESCRIPTION
.LP
.I hexedit
shows a file both in ASCII and in hexadecimal. The file can be a device
as the file is read a piece at a time. You can modify the file and search through it.
.SH OPTIONS
.TP
.I "\-s, \-\-sector"
Format the display to have entire sectors.
.TP
.I "\-m, \-\-maximize"
Try to maximize the display.
.TP
.I "\-\-color"
Display colors.
This feature is only available if your operating system supports it.
.TP
.I "\-l<n>, \-\-linelength <n>"
Explicitly set the number of bytes to display per line to <n>.
.TP
.I "\-h, \-\-help"
Show the usage.
.nf

.fi
.SS In insert mode
.nf

ESC or Ctrl-c or Ctrl-j or Ctrl-[ : return to normal mode
Ctrl-h or BACKSAPCE               : delete backward char
Ctrl-w                            : delete backward chars
[0-f]                             : insert or replace a char under current cursor

.fi
.SS In normal mode
.nf

i        : goto insert mode
A        : insert chars in the end of the file
gg, G    : go to start/end of the file
l        : next character
h        : previous character
j        : next line
k        : previous line
b        : backward chars
w        : forward chars
0        : beginning of line
$        : end of line
Ctrl-d   : next lines
Ctrl-u   : prev lines
Ctrl-f   : page forward
Ctrl-b   : page backward
F1       : help
Ctrl-L   : redraw
Ctrl-Z   : suspend
v        : enter visual mode and quit visual mode
p        : paste
zz       : center cursor
ZQ       : quit without saving
ZZ       : save and exit
r        : replace the char under the cursor
R        : replace a hex-char under the cursor
Ctrl-w-w : toggle hex/ascii
/, ?     : search forward and backward
f        : goto char
x        : delete edited hex-char
dw       : delete edited hex-chars
dG       : truncate file
Return   : go to
:        : enter command mode


.fi
.SS In visual mode
.nf
y       : copy
p       : paste
C or cc : fill

.fi
.SS In command mode
.nf
p or paste : paste into a file
f or find  : find and open a file
w or write : save
q or quit  : quit and ask about saving
q!         : quit without asking save
wq         : save and quit

.fi
.PP
For the \fIEsc\fR commands, it sometimes works to use \fIAlt\fR instead of
\fIEsc\fR. Funny things here (especially for froggies :) egrave = Alt+H ,
ccedilla = Alt+G, Alt+Y = ugrave.
.br
.SS Modeline
At the bottom of the display you have the modeline (copied from emacs). As in
emacs, you have the indications --, ** and %% meaning unmodified, modified and
read-only. Then you have the name of the file you're currently editing. Next to
it is the current position of the cursor in the file followed by the total file
size. The total file size isn't quite correct for devices.
.br
While in --sector mode, it shows the sector the cursor is in.
.SS Editing
You can edit in ASCII or in hexadecimal. You can switch between the two with
\fITab\fR. When the file is read-only, you can't edit it. When trying to edit a
read-only file, a message "File is read-only" tells you it is non-writable.
.br
The modifications are shown in bold until they are saved.
The modeline indicates whether you have modified the file or not.
.br
When editing in hexadecimal, only \fI0\fR,\fI1\fR,...,\fI9\fR,
\fIa\fR,\fIb\fR,...,\fIf\fR, \fIA\fR,\fIB\fR,...\fIF\fR are legal.
Other keys are unbound. The first time you hit an unbound key, the help pops up.
It won't pop again unless you call the help directly (with \fIF1\fR).
.br
When editing in ascii, you can find it difficult to enter characters like
\fI/\fR which are bound to a function. The solution is to use the quoted insert
function \fICtrl+Q\fR, the key after the quoted insert function is not processed
by \fIhexedit\fR (like emacs' quoted-insert, or like the \\ character in C).
.SS Searching
You can search for a string in ASCII or in hexadecimal. You can switch
between the two with \fITab\fR. If the string is found, the cursor is moved to
the beginning of the matching location. If the search failed, a message "not found"
tells you so. You can cancel the search by pressing a key.
.br
The search in hexadecimal is a bit confusing. You must give a hexadecimal string
with an even number of characters. The search can then be done byte by byte. If
you want to search a long number (eg: a 32 bit number), you must know the
internal representation of that number (little/big endian problem) and give it
the way it is in memory. For example, on an Intel processor (little endian), you
must swap every bytes: 0x12345678 is written 0x78563412 in memory and that's the
string you must give to the search engine.
.br
Before searching you are asked if you want to save the changes, if the file is
edited.
.PP
For more sophisticated search, see Volker Schatz's patch at
<http://www.volkerschatz.com/unix/homebrew.html#hexedit>.
.SS Selecting, copying, pasting, filling
First, select the part of the buffer you want to copy: start setting the mark
where you want. Then go to the end of the area you want to copy (you can use the
go to function and the search functions). Then copy it. You can then paste the
copied area in the current file or in another file.
.PP
You can also fill the selected area with a string or a character: start choosing
the block you want to fill in (set mark then move to the end of the block), and
call the fill function (\fIF12\fR). \fIhexedit\fR ask you the string you want to
fill the block with.
.br
The code is not tuned for huge filling as it keeps the modifications in memory
until you save them. That's why \fIhexedit\fR will warn you if you try to fill
in a big block.
.PP
When the mark is set, the selection is shown in reverse mode.
.br
Be aware that the copied area contains the modifications done at the time of the
copy. But if you undo the modifications, it does not change the content of the
copy buffer. It seems obvious but it's worth saying.
.SS Scrolling
The scrolling is different whether you are in \fI\-\-sector\fR mode or not. In
normal mode, the scrolling is line by line. In sector mode, the scrolling is
sector by sector. In both modes, you can force the display to start at a given
position using \fIEsc+L\fR.
.SH SEE ALSO
od(1), hdump(1), hexdump(1), bpe(1), hexed(1), beav(1).
.SH AUTHOR
Pixel (Pascal Rigaux) <pixel@rigaux.org>, 
.br
Home page is <http://rigaux.org/>.
.SH UNRESTRICTIONS
.I hexedit
is Open Source; anyone may redistribute copies of 
.I hexedit
to
anyone under the terms stated in the GNU General Public License.
.PP
You can find
.I hexedit
at 
.br
<https://github.com/pixel/hexedit/archive/@VERSION@.tar.gz>
.SH TODO
Anything you think could be nice...
.SH LIMITATIONS
There are problems with the curses library given with Redhat 5.0 that make
\fIhexedit\fR think the terminal is huge. The result is that hexedit is
not usable.
.PP
The shortcuts work on some machines, and not on others. That's why there are
many shortcuts for each function. The Ctrl+Arrows and the Alt+. do not work
work as they should most of the time. On SUNs, you must do Ctrl+V-Ctrl+V instead 
of Ctrl+V (!); and the Alt key is the diamond one.
.PP
While searching, it could be interesting to know which position the search has
reached. It's always nice to see something moving to help waiting.
.PP
The hexadecimal search could be able to search modulo 4 bits instead of 8 bits.
Another feature could be to complete padd odd length hexadecimal searches with
zeros.
.SH BUGS
I have an example where the display is completely screwed up. It seems to be a
bug in ncurses (or maybe in xterm and rxvt)?? Don't know if it's me using
ncurses badly or not... It seems to happen when \fIhexedit\fR leaves only one
space at the end of the lines... If anyone has a (or the) solution, please tell
me!
.PP
If you have any problem with the program (even a small one), please do report it
to me. Remarks of any kind are also welcome.
.PP
